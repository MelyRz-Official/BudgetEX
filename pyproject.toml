[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "budget-manager"
version = "1.0.0"
description = "A professional personal finance management application with modern architecture"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Melissa Ruiz", email = "your-email@example.com"}
]
maintainers = [
    {name = "Melissa Ruiz", email = "your-email@example.com"}
]
keywords = ["budget", "finance", "personal-finance", "money", "management", "accounting"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "Topic :: Office/Business :: Financial :: Accounting",
    "Topic :: Office/Business :: Financial :: Investment",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Environment :: MacOS X",
    "Environment :: Win32 (MS Windows)",
    "Environment :: X11 Applications",
    "Natural Language :: English",
]
requires-python = ">=3.9"
dependencies = [
    "sv-ttk>=2.6.0",
    "matplotlib>=3.5.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-timeout>=2.1.0",
    "pytest-html>=3.1.0",
    "freezegun>=1.2.0",
]
docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=8.0.0",
]
build = [
    "build>=0.10.0",
    "twine>=4.0.0",
    "wheel>=0.40.0",
]

[project.scripts]
budget-manager = "budget_app:main"
budget-test = "run_tests:main"

[project.urls]
Homepage = "https://github.com/MellyRz-Official/BudgetEX"
Repository = "https://github.com/MellyRz-Official/BudgetEX"
Documentation = "https://github.com/MellyRz-Official/BudgetEX#readme"
"Bug Reports" = "https://github.com/MellyRz-Official/BudgetEX/issues"
Changelog = "https://github.com/MellyRz-Official/BudgetEX/blob/main/CHANGELOG.md"

# Tool configurations
[tool.setuptools]
package-dir = {"" = "."}
include-package-data = true

[tool.setuptools.packages.find]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.md", "*.txt", "*.yml", "*.yaml"]

# Black code formatting
[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["models", "controllers", "config.py", "tests"]

# MyPy type checking
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "matplotlib.*",
    "sv_ttk.*",
    "tkinter.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=models",
    "--cov=controllers", 
    "--cov=config",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=75",
]
testpaths = ["tests"]
markers = [
    "unit: Unit tests for individual components",
    "integration: Integration tests for component interaction",
    "performance: Performance and load tests",
    "slow: Tests that take more than a few seconds",
    "database: Tests that require database operations",
    "ui: Tests related to user interface components",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["models", "controllers", "config"]
omit = [
    "tests/*",
    "*/tests/*",
    "setup.py",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "test_*.py", "*_test.py"]
skips = ["B101", "B601"]  # Skip assert_used and shell injection (for tests)

# Flake8 style guide (in setup.cfg since flake8 doesn't support pyproject.toml yet)
# Configuration will be in setup.cfg

# Pre-commit hooks configuration (will be in separate file)