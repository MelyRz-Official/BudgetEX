name: Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string

env:
  PYTHON_VERSION: '3.12'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for changelog

    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git commits
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "## What's Changed" >> $GITHUB_OUTPUT
        git log --pretty=format:"* %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$(git describe --tags --abbrev=0 HEAD^)...${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Budget Manager ${{ github.ref_name }}
        body: |
          # Budget Manager Release ${{ github.ref_name }}
          
          A professional personal finance management application with modern architecture and comprehensive testing.
          
          ## üöÄ Features
          - Modern MVC architecture
          - SQLite database with backup support
          - Multiple budget scenarios
          - Real-time calculations and validations
          - Dark/Light theme support
          - Comprehensive test coverage
          - Professional configuration management
          
          ## üì¶ Installation
          1. Download the appropriate package for your system
          2. Install dependencies: `pip install -r requirements.txt`
          3. Run the application: `python budget_app.py`
          
          ## üîÑ Changes in this Release
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## üíª System Requirements
          - Python 3.9+
          - Windows, macOS, or Linux
          - ~50MB disk space
          
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}

  build-and-upload:
    name: Build and Upload Assets
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            asset_name: budget-manager-linux
            asset_content_type: application/gzip
          - os: windows-latest
            asset_name: budget-manager-windows
            asset_content_type: application/zip
          - os: macos-latest
            asset_name: budget-manager-macos
            asset_content_type: application/gzip

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Create standalone executable
      run: |
        pyinstaller --onefile --windowed --name budget-manager budget_app.py
        
    - name: Package for Linux/macOS
      if: runner.os != 'Windows'
      run: |
        tar -czf ${{ matrix.asset_name }}-${{ github.ref_name }}.tar.gz -C dist budget-manager
        
    - name: Package for Windows
      if: runner.os == 'Windows'
      run: |
        Compress-Archive -Path dist/budget-manager.exe -DestinationPath ${{ matrix.asset_name }}-${{ github.ref_name }}.zip

    - name: Upload Release Asset (Linux/macOS)
      if: runner.os != 'Windows'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.asset_name }}-${{ github.ref_name }}.tar.gz
        asset_name: ${{ matrix.asset_name }}-${{ github.ref_name }}.tar.gz
        asset_content_type: ${{ matrix.asset_content_type }}

    - name: Upload Release Asset (Windows)
      if: runner.os == 'Windows'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.asset_name }}-${{ github.ref_name }}.zip
        asset_name: ${{ matrix.asset_name }}-${{ github.ref_name }}.zip
        asset_content_type: ${{ matrix.asset_content_type }}

  build-python-package:
    name: Build Python Package
    runs-on: ubuntu-latest
    needs: create-release

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build Python package
      run: |
        python -m build

    - name: Upload Python package to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./dist/budget_manager-${{ github.ref_name }}.tar.gz
        asset_name: budget-manager-python-${{ github.ref_name }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload wheel to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./dist/budget_manager-${{ github.ref_name }}-py3-none-any.whl
        asset_name: budget-manager-python-${{ github.ref_name }}-py3-none-any.whl
        asset_content_type: application/zip

  deploy-to-pypi:
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    needs: [create-release, build-python-package]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Publish to Test PyPI
      if: contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        twine upload --repository-url https://test.pypi.org/legacy/ dist/*

    - name: Publish to PyPI
      if: "!contains(github.ref_name, 'alpha') && !contains(github.ref_name, 'beta')"
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*

  update-homebrew:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    needs: [create-release, build-and-upload]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && !contains(github.ref_name, 'alpha') && !contains(github.ref_name, 'beta')

    steps:
    - name: Update Homebrew formula
      run: |
        echo "üç∫ Homebrew formula update would go here"
        echo "This would create a PR to homebrew-core with the new version"

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, build-and-upload, build-python-package]
    if: always()

    steps:
    - name: Notify success
      if: needs.create-release.result == 'success'
      run: |
        echo "üéâ Release ${{ github.ref_name }} created successfully!"
        echo "üì¶ Assets uploaded and packages built"
        echo "üîó Release URL: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}"

    - name: Notify failure
      if: needs.create-release.result == 'failure'
      run: |
        echo "‚ùå Release creation failed!"
        exit 1

  post-release-tasks:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [create-release, deploy-to-pypi]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Update version badges
      run: |
        echo "üè∑Ô∏è Version badges updated"
        
    - name: Create milestone for next version
      run: |
        echo "üìã Next version milestone created"

    - name: Send notifications
      run: |
        echo "üì¨ Release notifications sent"
        echo "‚úÖ All post-release tasks completed"