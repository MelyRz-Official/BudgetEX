name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly security scans
    - cron: '0 6 * * 1'  # Every Monday at 6 AM UTC

env:
  PYTHON_VERSION: '3.12'

jobs:
  code-formatting:
    name: Code Formatting
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install formatting tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort

    - name: Check Black formatting
      run: |
        black --check --diff --color models/ controllers/ config.py *.py

    - name: Check isort import sorting
      run: |
        isort --check-only --diff --color models/ controllers/ config.py *.py

    - name: Auto-fix formatting (if on PR from fork)
      if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false
      run: |
        black models/ controllers/ config.py *.py
        isort models/ controllers/ config.py *.py
        
    - name: Commit formatting fixes
      if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: 'style: auto-fix code formatting'
        file_pattern: '*.py'

  linting:
    name: Linting
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 flake8-docstrings flake8-import-order flake8-bugbear

    - name: Run flake8
      run: |
        flake8 models/ controllers/ config.py --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 models/ controllers/ config.py --count --max-complexity=10 --max-line-length=100 --statistics

    - name: Annotate flake8 results
      uses: rbialon/flake8-annotations@v1
      if: failure()
      with:
        config_file: setup.cfg
        name: Flake8 Annotations

  type-checking:
    name: Type Checking
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install mypy types-requests

    - name: Run MyPy type checking
      run: |
        mypy models/ controllers/ config.py --ignore-missing-imports --no-error-summary

    - name: Upload MyPy report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: mypy-report
        path: mypy-report/

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety semgrep

    - name: Run Bandit security linter
      run: |
        bandit -r models/ controllers/ config.py -f json -o bandit-report.json
      continue-on-error: true

    - name: Run Safety dependency check
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true

    - name: Run Semgrep security scan
      run: |
        semgrep --config=auto --json --output=semgrep-report.json models/ controllers/ config.py
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json

    - name: Security report summary
      if: always()
      run: |
        echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Bandit: Static security analysis" >> $GITHUB_STEP_SUMMARY
        echo "- Safety: Dependency vulnerability check" >> $GITHUB_STEP_SUMMARY
        echo "- Semgrep: Advanced security patterns" >> $GITHUB_STEP_SUMMARY
        echo "Check artifacts for detailed reports" >> $GITHUB_STEP_SUMMARY

  dependency-check:
    name: Dependency Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-audit pipdeptree

    - name: Audit dependencies
      run: |
        pip-audit --format=json --output=pip-audit-report.json
      continue-on-error: true

    - name: Generate dependency tree
      run: |
        pipdeptree --json > dependency-tree.json

    - name: Check for outdated packages
      run: |
        pip list --outdated --format=json > outdated-packages.json

    - name: Upload dependency reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-reports
        path: |
          pip-audit-report.json
          dependency-tree.json
          outdated-packages.json

  code-complexity:
    name: Code Complexity Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install analysis tools
      run: |
        python -m pip install --upgrade pip
        pip install radon xenon

    - name: Run complexity analysis
      run: |
        radon cc models/ controllers/ config.py --json > complexity-report.json
        radon mi models/ controllers/ config.py --json > maintainability-report.json

    - name: Check complexity thresholds
      run: |
        xenon --max-absolute B --max-modules A --max-average A models/ controllers/ config.py

    - name: Upload complexity reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: complexity-reports
        path: |
          complexity-report.json
          maintainability-report.json

  documentation-check:
    name: Documentation Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install documentation tools
      run: |
        python -m pip install --upgrade pip
        pip install pydocstyle interrogate

    - name: Check docstring coverage
      run: |
        interrogate models/ controllers/ config.py --generate-badge .github/badges/
      continue-on-error: true

    - name: Check docstring style
      run: |
        pydocstyle models/ controllers/ config.py --convention=google
      continue-on-error: true

    - name: Upload documentation badges
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: documentation-badges
        path: .github/badges/

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install license checker
      run: |
        python -m pip install --upgrade pip
        pip install pip-licenses

    - name: Check licenses
      run: |
        pip-licenses --format=json --output-file=licenses-report.json

    - name: Upload license report
      uses: actions/upload-artifact@v3
      with:
        name: license-report
        path: licenses-report.json

  quality-summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs: [code-formatting, linting, type-checking, security-scan, dependency-check, code-complexity]
    if: always()

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate quality report
      run: |
        echo "# Code Quality Report" > quality-summary.md
        echo "Generated on $(date)" >> quality-summary.md
        echo "" >> quality-summary.md
        
        echo "## Summary" >> quality-summary.md
        echo "- Code Formatting: ${{ needs.code-formatting.result }}" >> quality-summary.md
        echo "- Linting: ${{ needs.linting.result }}" >> quality-summary.md
        echo "- Type Checking: ${{ needs.type-checking.result }}" >> quality-summary.md
        echo "- Security Scan: ${{ needs.security-scan.result }}" >> quality-summary.md
        echo "- Dependency Check: ${{ needs.dependency-check.result }}" >> quality-summary.md
        echo "- Code Complexity: ${{ needs.code-complexity.result }}" >> quality-summary.md
        
        echo "" >> quality-summary.md
        echo "## Actions Required" >> quality-summary.md
        
        if [ "${{ needs.code-formatting.result }}" != "success" ]; then
          echo "- Fix code formatting issues" >> quality-summary.md
        fi
        
        if [ "${{ needs.linting.result }}" != "success" ]; then
          echo "- Address linting violations" >> quality-summary.md
        fi
        
        if [ "${{ needs.security-scan.result }}" != "success" ]; then
          echo "- Review security scan results" >> quality-summary.md
        fi

    - name: Upload quality summary
      uses: actions/upload-artifact@v3
      with:
        name: quality-summary
        path: quality-summary.md

    - name: Comment PR with quality report
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('quality-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });