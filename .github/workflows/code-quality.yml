name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 6 * * 1'  # Weekly Monday 6 AM UTC

env:
  PYTHON_VERSION: '3.12'

jobs:
  formatting:
    name: Code Formatting
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install formatting tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort

    - name: Check Black formatting
      run: |
        echo "Checking Black formatting..."
        if black --check --diff --color models/ controllers/ config.py *.py; then
          echo "✅ Black formatting check passed"
        else
          echo "❌ Black formatting issues found. Run 'black models/ controllers/ config.py *.py' to fix."
          exit 1
        fi
      continue-on-error: true  # Allow job to continue but mark as failed

    - name: Check import sorting
      run: |
        echo "Checking import sorting..."
        if isort --check-only --diff --color models/ controllers/ config.py *.py; then
          echo "✅ Import sorting check passed"
        else
          echo "❌ Import sorting issues found. Run 'isort models/ controllers/ config.py *.py' to fix."
          exit 1
        fi
      continue-on-error: true

  linting:
    name: Linting
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt || echo "No requirements.txt found, continuing..."
        pip install flake8 flake8-docstrings

    - name: Run flake8
      run: |
        echo "Running flake8 linting..."
        if flake8 models/ controllers/ config.py --max-line-length=100 --ignore=E203,W503 --count --statistics; then
          echo "✅ Linting check passed"
        else
          echo "❌ Linting issues found. Please fix the issues above."
          exit 1
        fi
      continue-on-error: true

  type-checking:
    name: Type Checking
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt || echo "No requirements.txt found, continuing..."
        pip install mypy types-requests

    - name: Run MyPy type checking
      run: |
        echo "Running MyPy type checking..."
        mypy models/ controllers/ config.py --ignore-missing-imports --show-error-codes --pretty || echo "Type checking completed with issues"
      continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt || echo "No requirements.txt found, continuing..."

    - name: Install security tools
      run: |
        pip install bandit safety

    - name: Run Bandit security scan
      run: |
        echo "Running Bandit security scan..."
        bandit -r models/ controllers/ config.py -f json -o bandit-report.json || echo "Bandit scan completed with issues"
        if [ -f bandit-report.json ]; then
          echo "📋 Bandit report generated"
          cat bandit-report.json
        fi
      continue-on-error: true

    - name: Run Safety dependency check
      run: |
        echo "Running Safety dependency check..."
        safety check --json --output safety-report.json || echo "Safety check completed with issues"
        if [ -f safety-report.json ]; then
          echo "📋 Safety report generated"
          cat safety-report.json
        fi
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        if-no-files-found: warn

  quality-summary:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [formatting, linting, type-checking, security]
    if: always()

    steps:
    - name: Quality Summary
      run: |
        echo "## Code Quality Report" >> $GITHUB_STEP_SUMMARY
        echo "- Formatting: ${{ needs.formatting.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Linting: ${{ needs.linting.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Type Checking: ${{ needs.type-checking.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Security: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Job summary generated at run-time" >> $GITHUB_STEP_SUMMARY