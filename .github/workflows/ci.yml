name: Budget Manager CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.12'

jobs:
  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          - os: macos-latest
            python-version: '3.9'
          - os: windows-latest
            python-version: '3.10'
      fail-fast: false  # Continue other jobs even if one fails

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest

    - name: Create necessary directories (Windows)
      if: runner.os == 'Windows'
      run: |
        if (-not (Test-Path "backups")) { New-Item -ItemType Directory -Path "backups" }
        if (-not (Test-Path "exports")) { New-Item -ItemType Directory -Path "exports" }
      shell: powershell

    - name: Create necessary directories (Unix)
      if: runner.os != 'Windows'
      run: |
        mkdir -p backups
        mkdir -p exports

    - name: Run Budget Manager tests
      run: python run_tests.py
      continue-on-error: true  # Don't fail the entire job if tests have issues

    - name: Test imports
      run: |
        python -c "import config; print('✅ Config import successful')"
        python -c "from models.budget_model import BudgetModel; print('✅ Model import successful')"
        python -c "from controllers.budget_controller import BudgetController; print('✅ Controller import successful')"
      continue-on-error: true

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build

    - name: Build package
      run: python -m build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: dist/