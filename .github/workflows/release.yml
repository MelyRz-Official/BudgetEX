name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string

env:
  PYTHON_VERSION: '3.12'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate changelog
      id: changelog
      run: |
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "## What's Changed" >> $GITHUB_OUTPUT
        if git describe --tags --abbrev=0 HEAD^ >/dev/null 2>&1; then
          git log --pretty=format:"* %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> $GITHUB_OUTPUT
        else
          git log --pretty=format:"* %s (%h)" >> $GITHUB_OUTPUT
        fi
        echo "" >> $GITHUB_OUTPUT
        echo "**Full Changelog**: https://github.com/${{ github.repository }}/commits/${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        name: Budget Manager ${{ github.ref_name }}
        body: |
          # Budget Manager Release ${{ github.ref_name }}
          
          ðŸŽ‰ **Professional Personal Finance Management Application**
          
          ## ðŸš€ Features
          - Modern MVC architecture with comprehensive testing
          - SQLite database with automatic backup support
          - Multiple budget scenarios (July-Dec 2025, Fresh New Year plans)
          - Real-time calculations and budget validations
          - Dark/Light theme support with Sun Valley styling
          - Professional configuration management
          - Cross-platform compatibility (Windows, macOS, Linux)
          
          ## ðŸ“¦ Installation
          1. Download the appropriate package for your system below
          2. Install Python 3.9+ if not already installed
          3. Install dependencies: `pip install -r requirements.txt`
          4. Run: `python budget_app.py`
          
          ## ðŸ”„ Changes in this Release
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## ðŸ’» System Requirements
          - Python 3.9 or higher
          - Windows 10+, macOS 10.14+, or Linux
          - ~50MB disk space
          - Internet connection for theme downloads
          
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}

  build-packages:
    name: Build Packages
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            asset_name: budget-manager-linux
          - os: windows-latest
            asset_name: budget-manager-windows
          - os: macos-latest
            asset_name: budget-manager-macos

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executable
      run: |
        pyinstaller --onefile --windowed --name budget-manager budget_app.py

    - name: Package for Linux/macOS
      if: runner.os != 'Windows'
      run: |
        tar -czf ${{ matrix.asset_name }}-${{ github.ref_name }}.tar.gz -C dist budget-manager

    - name: Package for Windows
      if: runner.os == 'Windows'
      run: |
        Compress-Archive -Path dist/budget-manager.exe -DestinationPath ${{ matrix.asset_name }}-${{ github.ref_name }}.zip
      shell: powershell

    - name: Upload Release Asset (Linux/macOS)
      if: runner.os != 'Windows'
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        files: ./${{ matrix.asset_name }}-${{ github.ref_name }}.tar.gz

    - name: Upload Release Asset (Windows)
      if: runner.os == 'Windows'
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        files: ./${{ matrix.asset_name }}-${{ github.ref_name }}.zip

  build-python-package:
    name: Build Python Package
    runs-on: ubuntu-latest
    needs: create-release

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Find built package
      id: find_package
      run: |
        PACKAGE_FILE=$(ls dist/*.tar.gz | head -1)
        echo "package_file=$PACKAGE_FILE" >> $GITHUB_OUTPUT
        echo "Found package: $PACKAGE_FILE"

    - name: Upload Python Package
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        files: ${{ steps.find_package.outputs.package_file }}